OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0@OPROJECT_VERSION_RELEASE_TYPE@
# options: 
surface spots
param	color	Cin	1 1 1		%read{34,34} %write{2147483647,-1}
oparam	color	Cout	1 1 1		%read{2147483647,-1} %write{34,35}
global	float	u	%read{1,25} %write{2147483647,-1}
global	float	v	%read{7,26} %write{2147483647,-1}
local	float	repeatCount	%read{1,26} %write{0,0}
local	float	s	%read{23,23} %write{6,6}
local	float	t	%read{23,23} %write{12,12}
local	float	___325_fuzz	%read{30,31} %write{21,21}
local	point	___325_centre	%read{24,24} %write{22,22}
local	point	___325_here	%read{24,24} %write{23,23}
local	float	___325_dist	%read{32,32} %write{24,24}
local	float	___325_radius	%read{30,31} %write{28,28}
local	color	___325_myColor	%read{34,34} %write{29,29}
local	float	___325_inDisk	%read{34,34} %write{33,33}
const	int	$const1	100		%read{0,0} %write{2147483647,-1}
temp	float	$tmp1	%read{3,6} %write{1,1}
const	int	$const2	1		%read{35,35} %write{2147483647,-1}
const	float	$const3	1		%read{3,33} %write{2147483647,-1}
const	string	$const4	"mod"		%read{2,8} %write{2147483647,-1}
temp	float	$tmp2	%read{5,5} %write{4,4}
temp	float	$tmp3	%read{4,4} %write{3,3}
temp	float	$tmp4	%read{6,6} %write{5,5}
temp	float	$tmp5	%read{9,12} %write{7,7}
temp	float	$tmp6	%read{11,11} %write{10,10}
temp	float	$tmp7	%read{10,10} %write{9,9}
temp	float	$tmp8	%read{12,12} %write{11,11}
temp	float	$tmp9	%read{16,16} %write{15,15}
const	string	$const5	"perlin"		%read{15,27} %write{2147483647,-1}
temp	float	$tmp10	%read{15,15} %write{13,13}
temp	float	$tmp11	%read{15,15} %write{14,14}
const	float	$const6	0.600000024		%read{16,16} %write{2147483647,-1}
temp	int	$tmp12	%read{17,17} %write{16,16}
temp	float	$tmp13	%read{21,21} %write{20,20}
temp	float	$tmp14	%read{20,20} %write{18,18}
temp	float	$tmp15	%read{20,20} %write{19,19}
const	float	$const7	0.100000001		%read{21,21} %write{2147483647,-1}
const	point	$const8	0.5 0.5 0		%read{22,22} %write{2147483647,-1}
const	int	$const9	0		%read{29,29} %write{2147483647,-1}
const	float	$const10	0		%read{23,23} %write{2147483647,-1}
temp	float	$tmp16	%read{28,28} %write{27,27}
temp	float	$tmp17	%read{27,27} %write{25,25}
temp	float	$tmp18	%read{27,27} %write{26,26}
const	float	$const11	0.300000012		%read{28,28} %write{2147483647,-1}
temp	float	$tmp19	%read{33,33} %write{32,32}
temp	float	$tmp20	%read{32,32} %write{30,30}
temp	float	$tmp21	%read{32,32} %write{31,31}
code ___main___
# spots.osl:6
#     float repeatCount=100;
	assign		repeatCount $const1 	%filename{"spots.osl"} %line{6} %argrw{"wr"}
# spots.osl:7
#     float s=mod(u*repeatCount,1);
	mul		$tmp1 u repeatCount 	%line{7} %argrw{"wrr"}
	functioncall	$const4 7 	%argrw{"r"}
# /opt/pixar/RenderManProServer-24.4/lib/osl/include/stdosl.h:154
# float  mod (float  a, float  b) { return a - b*floor(a/b); }
	div		$tmp3 $tmp1 $const3 	%filename{"/opt/pixar/RenderManProServer-24.4/lib/osl/include/stdosl.h"} %line{154} %argrw{"wrr"}
	floor		$tmp2 $tmp3 	%argrw{"wr"}
	mul		$tmp4 $const3 $tmp2 	%argrw{"wrr"}
	sub		s $tmp1 $tmp4 	%argrw{"wrr"}
# spots.osl:8
#     float t=mod(v*repeatCount,1);
	mul		$tmp5 v repeatCount 	%filename{"spots.osl"} %line{8} %argrw{"wrr"}
	functioncall	$const4 13 	%argrw{"r"}
# /opt/pixar/RenderManProServer-24.4/lib/osl/include/stdosl.h:154
# float  mod (float  a, float  b) { return a - b*floor(a/b); }
	div		$tmp7 $tmp5 $const3 	%filename{"/opt/pixar/RenderManProServer-24.4/lib/osl/include/stdosl.h"} %line{154} %argrw{"wrr"}
	floor		$tmp6 $tmp7 	%argrw{"wr"}
	mul		$tmp8 $const3 $tmp6 	%argrw{"wrr"}
	sub		t $tmp5 $tmp8 	%argrw{"wrr"}
# spots.osl:10
#     if((float)noise("perlin",u*repeatCount,v*repeatCount)>0.6){
	mul		$tmp10 u repeatCount 	%filename{"spots.osl"} %line{10} %argrw{"wrr"}
	mul		$tmp11 v repeatCount 	%argrw{"wrr"}
	noise		$tmp9 $const5 $tmp10 $tmp11 	%argrw{"wrrr"}
	gt		$tmp12 $tmp9 $const6 	%argrw{"wrr"}
	if		$tmp12 35 36 	%argrw{"r"}
# spots.osl:11
# 	    float fuzz=(float) noise("perlin",repeatCount*u,repeatCount*v)*0.1;
	mul		$tmp14 repeatCount u 	%line{11} %argrw{"wrr"}
	mul		$tmp15 repeatCount v 	%argrw{"wrr"}
	noise		$tmp13 $const5 $tmp14 $tmp15 	%argrw{"wrrr"}
	mul		___325_fuzz $tmp13 $const7 	%argrw{"wrr"}
# spots.osl:12
#         point centre=point (0.5,0.5,0);
	assign		___325_centre $const8 	%line{12} %argrw{"wr"}
# spots.osl:13
#         point here=point (s,t,0);
	point		___325_here s t $const10 	%line{13} %argrw{"wrrr"}
# spots.osl:14
#         float dist=distance(centre,here);
	distance	___325_dist ___325_centre ___325_here 	%line{14} %argrw{"wrr"}
# spots.osl:15
#         float radius=(float) noise("perlin",repeatCount*u,repeatCount*v)*0.3;
	mul		$tmp17 repeatCount u 	%line{15} %argrw{"wrr"}
	mul		$tmp18 repeatCount v 	%argrw{"wrr"}
	noise		$tmp16 $const5 $tmp17 $tmp18 	%argrw{"wrrr"}
	mul		___325_radius $tmp16 $const11 	%argrw{"wrr"}
# spots.osl:16
#         color myColor=(color) 0;
	assign		___325_myColor $const9 	%line{16} %argrw{"wr"}
# spots.osl:17
#         float inDisk=1-smoothstep(radius-fuzz,radius+fuzz,dist);
	sub		$tmp20 ___325_radius ___325_fuzz 	%line{17} %argrw{"wrr"}
	add		$tmp21 ___325_radius ___325_fuzz 	%argrw{"wrr"}
	smoothstep	$tmp19 $tmp20 $tmp21 ___325_dist 	%argrw{"wrrr"}
	sub		___325_inDisk $const3 $tmp19 	%argrw{"wrr"}
# spots.osl:18
#         Cout=mix(Cin,myColor,inDisk);
	mix		Cout Cin ___325_myColor ___325_inDisk 	%line{18} %argrw{"wrrr"}
# spots.osl:21
# 	    Cout=(color) 1;
	assign		Cout $const2 	%line{21} %argrw{"wr"}
	end
